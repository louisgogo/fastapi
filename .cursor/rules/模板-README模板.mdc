---
description: 
globs: 
alwaysApply: true
---
- <ipd_concept_phase_review_record_template description="项目README标准模版">
- 文档名称：项目README标准模版
- 适用阶段：全阶段
- 适用范围：软件开发项目
- 输出要求：文档需以markdown格式编写，结构完整，内容详实，命名为"README.md"
- 输出目录：输出到系统根目录下

# 模版结构
## 📖 项目简介

用一句话描述项目的核心价值和用途。

## 技术架构
- **后端**：后端技术栈
- **部署**：Docker + Kubernetes（云上/云下）


## 📋 版本信息

### 当前版本：{版本号（例如1.0.0，每次修改系统都应该升级版本）}-修改日期{（例如2025-02-01）}

### 版本对比
- 说明：包含版本、发布日期、新特性（新功能或功能调整）、是否向前兼容、API兼容度（是否存在API变更）、数据兼容度（是否存在数据结构和概念调整）
- 举例：
```markdown
| 版本 | 发布日期 | 新特性 | 是否向前兼容 | API兼容度 | 数据兼容度 | 
|------|----------|----------|------|----------|----------|
| v1.1.0 | 2025-06 | 新增用户管理、性能优化 | 是 | 新增用户管理接口/user/add、/user/delete | 新增表T_USER_LOG |
| v1.0.1 | 2025-04 | 基础功能完善、安全加固 | 是 | 修改/user/info返回属性age枚举内容 | - |
| v1.0.0 | 2025-02 | 核心功能发布 | 是 | - | - |
```

### 升级指南
- @v1.0 → v1.1 升级指南

### 版本路线图
- 举例：
```markdown
- **v1.3.0**（2025-02）：微服务架构、高级分析
- **v1.4.0**（2025-05）：AI功能集成、移动端支持
- **v2.0.0**（2025-08）：架构重构、云原生支持
```

## 🚀 快速开始

### 环境要求

### 安装步骤

### 访问应用
- 开发环境：http://localhost:3000
- 管理后台：http://localhost:3000/admin
- API文档：http://localhost:3000/api-docs

## 📚 详细文档

### 用户使用说明
将每次需求中用户手册内容整理到该章节，不修改原内容

### 架构文档
- @系统架构设计
- @技术选型说明
- @数据库设计
- @API接口文档
- @架构图集合
- @技术文档版本化维护指南

### 历史文档
列举并引用/doc下文件内容

### 技术债清单
列举并引用生命周期阶段产生的技术债务清单

## 🏗️ 项目结构
- 举例：
```
project-root/
├── src/                    # 源代码
│   ├── components/         # 组件
│   ├── services/          # 业务服务
│   └── utils/             # 工具函数
├── tests/                 # 测试文件
├── docs/                  # 项目文档
├── docker/                # Docker配置
├── .github/               # GitHub Actions
└── README.md              # 项目说明
```

## 🧪 测试
将每次需求中测试用例、测试数据准备脚本、测试脚本整理到该章节，不修改原内容

## 🔴 当前问题
记录系统中常见问题，此处用户更新。仅需要定义表格格式。

## 🤝 贡献指南

我们欢迎任何形式的贡献！请阅读 @贡献指南 了解详情。

### 开发流程
1. Fork 项目
2. 创建特性分支：`git checkout -b feature/amazing-feature`
3. 提交更改：`git commit -m 'Add amazing feature'`
4. 推送分支：`git push origin feature/amazing-feature`
5. 提交 Pull Request

## 📄 许可证

本项目采用 @MIT许可证 - 详见LICENSE文件

## 👥 团队

- **项目负责人**：@@your-name
- **技术负责人**：@@tech-lead
- **贡献者**：@查看完整列表

## 📞 支持与联系

- 🐛 **Bug报告**：@提交Issue
- 💬 **功能建议**：@提交Feature Request
- 📧 **邮件支持**：support@your-domain.com
- 💬 **社区讨论**：@Discussions

```

# 🎯 最佳实践案例

### 优秀README案例分析
```
参考项目：
- React: facebook/react
- Vue.js: vuejs/vue
- Express: expressjs/express
- Kubernetes: kubernetes/kubernetes

学习要点：
- 清晰的价值主张表达
- 完整的快速开始指南
- 丰富的示例代码
- 完善的链接体系
- 活跃的社区维护
```

### 避免的常见问题
```
❌ 避免的问题：
- 信息过时不更新
- 安装步骤不完整
- 代码示例错误
- 链接失效
- 格式混乱
- 缺少核心信息
- 过于技术化
- 缺乏使用场景

✅ 正确的做法：
- 定期更新维护
- 验证所有步骤
- 测试代码示例
- 检查链接有效性
- 统一格式规范
- 包含完整信息
- 平衡技术和业务
- 提供真实场景
```

# 核心理念

README不是一次性文档，而是项目的活文档，需要在整个项目生命周期中持续维护和优化！