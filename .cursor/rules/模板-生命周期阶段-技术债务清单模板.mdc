---
description: 
globs: 
alwaysApply: true
---
<ipd_lifecycle_phase_technical_debt_inventory_template description="IPD流程生命周期阶段技术债务清单标准模版">
- 文档名称：技术债务清单
- 适用阶段：IPD流程-生命周期阶段
- 适用范围：软件开发项目
- 输出要求：文档需以markdown格式编写，结构完整，内容详实，命名为"技术债务清单.md"
- 输出目录：输出到系统根目录下doc文件夹中

# 模版结构
1. 文档信息
    - 文档名称
    - 项目名称
    - 产品版本
    - 评估日期
    - 评估人员：技术负责人、架构师、开发团队
    - 审核人
    - 下次评估计划日期
    - 修订记录
2. 概述
    - 评估目的：说明技术债务评估的目标和意义
    - 评估范围：界定技术债务评估的系统边界
    - 评估方法：采用的技术债务识别和量化方法
    - 评估标准：技术债务分类和严重程度的评判标准
    - 术语定义：技术债务相关术语的定义说明
3. 技术债务分类体系
    - 3.1 代码债务
        - 代码质量：代码规范、可读性、维护性问题
        - 代码重复：重复代码和冗余实现
        - 代码复杂度：过高的圈复杂度和嵌套层次
        - 死代码：未使用的代码和废弃功能
        - 代码异味：违反设计原则的代码结构
    - 3.2 架构债务
        - 架构违规：违反架构原则和设计模式
        - 模块耦合：模块间过度耦合和依赖混乱
        - 接口设计：不合理的接口设计和协议
        - 架构腐化：架构随时间演进的腐化问题
        - 技术选型：过时或不合适的技术选择
    - 3.3 设计债务
        - 设计缺陷：设计不完善或错误的实现
        - 扩展性问题：系统扩展性和灵活性不足
        - 性能设计：性能相关的设计缺陷
        - 安全设计：安全机制设计的不足
        - 用户体验：用户界面和交互设计问题
    - 3.4 测试债务
        - 测试覆盖：测试覆盖率不足的问题
        - 测试质量：测试用例质量和有效性问题
        - 自动化债务：自动化测试缺失或维护不当
        - 测试环境：测试环境配置和管理问题
        - 测试数据：测试数据准备和维护问题
    - 3.5 文档债务
        - 文档缺失：缺少必要的技术文档
        - 文档过时：文档与实际实现不符
        - 文档质量：文档内容不完整或不准确
        - 注释缺失：代码注释不足或过时
        - 知识传承：团队知识传承和分享不足
    - 3.6 基础设施债务
        - 环境配置：开发、测试、生产环境不一致
        - 部署流程：部署流程复杂或不稳定
        - 监控缺失：系统监控和告警机制不完善
        - 备份恢复：数据备份和恢复机制不健全
        - 安全配置：系统安全配置和加固不足
4. 技术债务清单
    - 4.1 债务清单格式
        - 债务ID：唯一标识符（格式：TD-[分类]-[序号]）
        - 债务标题：简要描述债务内容
        - 债务分类：按上述分类体系归类
        - 严重级别：高/中/低
        - 影响范围：受影响的系统模块或功能
        - 发现日期：债务首次识别的日期
        - 发现人员：债务识别的责任人
        - 详细描述：债务的详细说明和表现
        - 根本原因：导致债务产生的根本原因
        - 影响分析：债务对系统和团队的影响
        - 解决方案：债务解决的技术方案
        - 工作量估算：解决债务所需的工作量
        - 优先级：解决债务的优先级排序
        - 计划解决时间：预计解决债务的时间
        - 负责人：债务解决的责任人
        - 当前状态：新发现/已确认/处理中/已解决/延期
    - 4.2 高优先级债务清单
        - 列出所有高严重级别的技术债务
        - 按影响程度和紧急程度排序
        - 明确解决时间表和责任人
    - 4.3 中优先级债务清单
        - 列出中等严重级别的技术债务
        - 按业务价值和技术价值排序
        - 制定中长期解决规划
    - 4.4 低优先级债务清单
        - 列出较低严重级别的技术债务
        - 作为日常重构和优化的参考
        - 可在空闲时间或重构时处理
5. 债务量化分析
    - 5.1 债务规模统计
        - 债务总数：按分类统计的债务数量
        - 严重程度分布：高中低优先级债务的分布
        - 模块分布：债务在各系统模块中的分布
        - 发现时间分布：债务发现时间的统计分析
        - 债务趋势：债务数量随时间的变化趋势
    - 5.2 债务成本评估
        - 修复成本：解决各类债务所需的工作量成本
        - 维护成本：因债务存在导致的额外维护成本
        - 机会成本：因债务影响导致的功能开发延迟
        - 质量成本：因债务导致的质量问题和修复成本
        - 总体成本：技术债务的综合成本评估
    - 5.3 债务价值分析
        - 业务价值：解决债务对业务的价值贡献
        - 技术价值：解决债务对技术能力的提升
        - 团队价值：解决债务对团队效率的改善
        - 长期价值：解决债务的长期战略价值
        - ROI分析：债务解决的投资回报率分析
6. 债务影响评估
    - 6.1 开发效率影响
        - 开发速度：债务对新功能开发速度的影响
        - 代码维护：债务对代码维护难度的影响
        - 缺陷率：债务与系统缺陷率的关联分析
        - 重构难度：债务对系统重构工作的影响
    - 6.2 系统质量影响
        - 可维护性：债务对系统可维护性的影响
        - 可扩展性：债务对系统扩展能力的影响
        - 性能影响：债务对系统性能的影响
        - 安全影响：债务对系统安全性的影响
        - 稳定性影响：债务对系统稳定性的影响
    - 6.3 团队影响
        - 士气影响：债务对团队工作士气的影响
        - 学习成本：新成员因债务增加的学习成本
        - 知识传承：债务对团队知识传承的影响
        - 技能发展：债务对团队技能发展的影响
7. 债务解决策略
    - 7.1 解决原则
        - 优先级原则：按影响程度和紧急程度排序
        - 投入产出原则：优先解决ROI高的债务
        - 渐进式原则：采用渐进式的解决方式
        - 预防为主原则：重视债务的预防和控制
    - 7.2 解决方法
        - 重构：通过代码重构解决代码债务
        - 架构升级：通过架构升级解决架构债务
        - 标准化：通过标准化解决设计和流程债务
        - 自动化：通过自动化解决测试和部署债务
        - 文档补充：通过文档完善解决知识债务
    - 7.3 解决计划
        - 短期计划（1-3个月）：紧急和高优先级债务
        - 中期计划（3-6个月）：中等优先级债务
        - 长期计划（6-12个月）：低优先级和预防性措施
        - 持续改进：建立债务预防和控制机制
8. 债务预防措施
    - 8.1 开发阶段预防
        - 编码规范：建立和执行严格的编码规范
        - 代码审查：实施有效的代码审查机制
        - 设计评审：加强架构和设计评审
        - 技术选型：建立技术选型的评估机制
    - 8.2 质量控制
        - 自动化检查：使用工具进行自动化质量检查
        - 持续集成：建立持续集成和持续交付流程
        - 测试驱动：推行测试驱动开发实践
        - 质量门禁：设置质量门禁和准出标准
    - 8.3 管理机制
        - 债务跟踪：建立技术债务跟踪和管理机制
        - 定期评估：定期进行技术债务评估和清理
        - 团队培训：加强团队技术能力和意识培训
        - 激励机制：建立债务解决的激励机制
9. 风险评估
    - 高风险债务：可能导致严重后果的债务
    - 风险影响：各类债务可能产生的风险影响
    - 风险概率：债务导致问题的可能性评估
    - 风险应对：针对高风险债务的应对措施
    - 风险监控：债务风险的持续监控机制
10. 改进建议
    - 流程改进：开发流程的改进建议
    - 工具改进：开发工具和平台的改进建议
    - 团队改进：团队能力和协作的改进建议
    - 管理改进：项目管理和质量管理的改进建议
11. 跟踪和监控
    - 11.1 跟踪机制
        - 债务状态跟踪：债务解决进度的跟踪
        - 定期评估：定期的债务评估和更新
        - 趋势监控：债务变化趋势的监控
        - 效果评估：债务解决效果的评估
    - 11.2 报告机制
        - 月度报告：月度技术债务状态报告
        - 季度评估：季度技术债务全面评估
        - 年度总结：年度技术债务管理总结
        - 专项报告：重大债务的专项报告
12. 附录
    - 12.1 债务识别工具
        - 静态代码分析工具配置
        - 代码质量检查规则
        - 架构分析工具使用指南
        - 债务量化计算方法
    - 12.2 参考标准
        - 代码质量标准
        - 架构设计原则
        - 技术债务管理最佳实践
        - 相关行业标准和规范
    - 12.3 历史数据
        - 历史债务清单
        - 债务解决记录
        - 债务趋势分析数据
        - 经验教训总结

# 约束
- 文档必须覆盖上述所有一级标题内容
- 债务描述应具体明确，避免模糊表述
- 影响分析应量化评估，提供具体数据
- 解决方案应具体可行，有明确的实施步骤
- 优先级排序应基于客观标准和数据
- 成本评估应包含人力、时间、资源等维度
- 所有债务项目都应有明确的负责人和时间计划

# 债务严重级别定义
- 高：严重影响系统稳定性、安全性或开发效率
- 中：明显影响代码质量、维护性或团队效率
- 低：轻微影响或潜在风险，可在空闲时处理

# 债务状态定义
- 新发现：刚识别出的债务，待进一步确认
- 已确认：已确认需要解决的债务
- 处理中：正在解决过程中的债务
- 已解决：已完成解决并验证的债务
- 延期：因资源或优先级原因延期处理的债务

# 质量标准
- 识别完整性：全面识别各类技术债务
- 分析准确性：准确分析债务影响和成本
- 方案可行性：解决方案具体可执行
- 跟踪有效性：建立有效的跟踪监控机制
- 预防主动性：建立主动的债务预防机制

# 管理要求
- 定期更新：至少每季度更新一次债务清单
- 全员参与：开发团队全员参与债务识别
- 持续改进：基于债务管理经验持续改进流程
- 工具支持：使用工具辅助债务识别和管理
- 文化建设：培养团队的债务管理意识和文化

</ipd_lifecycle_phase_technical_debt_inventory_template>