<readme_generation_standard description="现有系统README文档维护说明">
- 规则名称：现有系统README分析生成规范
- 适用范围：所有软件开发项目
- 触发条件：分析现有系统或生成README文档时
- 输出要求：生成符合标准的README.md文件，必须使用系统当前时间，严禁杜撰信息

# 系统分析执行流程
## 第一步：项目结构扫描
1. 扫描项目根目录，获取完整的目录结构
2. 识别关键配置文件：pom.xml、/resource/{}.xml、/resource/{}.yml、/resource/{}.properties等
3. 分析src、docs、tests等核心目录的组织方式
4. 检查现有文档的完整性和质量状态

## 第二步：技术栈自动识别
### 后端技术识别规则
- 存在pom.xml + spring-boot依赖 → Spring Boot项目
- 存在requirements.txt + django → Django项目
- 存在go.mod → Go项目

### 数据库识别规则
- 配置文件中包含mysql → MySQL数据库
- 配置文件中包含postgresql → PostgreSQL数据库
- 配置文件中包含oracle → QSQL数据库
- 配置文件中包含OceanBean → OceanBean数据库
- 配置文件中包含mongodb → MongoDB数据库
- 配置文件中包含redis → Redis缓存

## 第三步：业务模块分析
1. 分析主要业务目录和功能模块划分
2. 识别核心API接口和服务端点
> 系统API主要包含HTTP、RPC两类
> - HTTP接口：接口路径、请求参数一般可以在Controller中定义，参考示例：
>```Java
@RequestMapping("/example") //接口跟路径
@RestController
class QueryController {
    @ResponseBody
	@RequestMapping(value = "/query", method = RequestMethod.POST) //接口方法和路径
	public BaseQueryResponse query(@RequestBody QueryRequest request){ //返回体 BaseQueryResponse 请求体QueryRequest
		BaseQueryResponse response = new BaseQueryResponse();
		response.buildSuccess();
		return response;
	}
}
>```
> - RPC接口：接口路径、请求参数一般可以在接口定义文件中定义，参考示例：
>```Java
@Service(QueryRequest.COMMAND_SERVICE_NAME) //接口路径QueryBatchBusiNameRequest.COMMAND_SERVICE_NAME
public class QueryService extends AbstractSysRpcService<QueryRequest>{ //请求体 QueryRequest
	@Override
	public BaseQueryResponse invoke(QueryBatchBusiNameRequest request){ //响应体 BaseQueryResponse
		BaseQueryResponse response = new BaseQueryResponse();
		response.buildSuccess();
		return response;
	}

}
>```
3. 分析数据模型和实体关系
- 列举各模块的数据模型(使用表结构图、DDL等描述)
- 列举各模块的实体关系(使用ER图、UML等描述)

## 第四步：用户场景分析
### 开发者场景需求
- 新成员快速上手和环境搭建
- 代码理解和开发规范
- 调试和测试流程

### 运维场景需求
- 部署配置和环境管理
- 监控告警和故障排查
- 性能优化和容量规划

### 产品场景需求
- 功能理解和业务流程
- 数据分析和用户反馈
- 产品迭代和需求管理

### 最终用户场景需求
- 使用指南和操作说明
- 功能说明和最佳实践
- 问题反馈和技术支持

# README生成标准模板
## 必备章节结构（严格按顺序生成）
```markdown
# 📖 项目简介

[基于代码分析生成的一句话核心价值描述]

## 🏗️ 技术架构
- **后端**：[自动识别的后端技术栈，如Spring Boot 3.x]
- **数据库**：[自动识别的数据库类型，如MySQL]

## 📋 版本信息

### 当前版本：{版本号（需用户确认）}-{系统当前日期yyyy-MM-dd}

### 版本对比
| 版本 | 发布日期 | 新特性 | 是否向前兼容 | API兼容度 | 数据兼容度 |
|---|----|----|---|----|----|
| [待用户填写] | [待用户填写] | [待用户填写] | [待用户填写] | [待用户填写] | [待用户填写] |

### 升级指南
[预留用户填写升级操作指南]

### 版本路线图
[预留用户填写未来版本规划]

## 🚀 快速开始

### 环境要求
[基于识别的技术栈自动生成环境要求列表]

### 安装步骤
[基于项目类型自动生成标准安装步骤]

### 访问应用
- 开发环境：http://localhost:8080
- 管理后台：[预留用户填写未来版本规划]
- API文档：[预留用户填写未来版本规划]

## 📚 详细文档

### 用户使用说明
[整合项目中现有用户手册内容，如无则提示待补充]

### 架构文档
- [自动引用doc目录下的架构设计文档，如无则提示待补充]

### 历史文档
[自动列举doc目录下所有文档文件，按类型分组]

### 技术债清单
[如果存在技术债务清单则引用，否则提示待建立]

## 🏗️ 项目结构
[自动扫描生成项目目录树结构，包含主要目录说明]
```
project-root/
├── src/                    # [根据实际结构描述]
├── docs/                   # [如果存在则说明]
├── tests/                  # [如果存在则说明]
└── README.md              # 项目说明文档
```

## 🧪 测试
[整合项目中测试用例、测试数据准备脚本、测试脚本等内容]

## 🔴 当前问题
| 问题类型 | 问题描述 | 影响程度 | 状态 | 负责人 | 预计解决时间 |
|---------|---------|---------|------|-------|-------------|
| [示例格式，供用户填写] | | | | | |

## 🤝 贡献指南

### 开发流程
1. Fork 项目
2. 创建特性分支：`git checkout -b feature/amazing-feature`
3. 提交更改：`git commit -m 'Add amazing feature'`
4. 推送分支：`git push origin feature/amazing-feature`
5. 提交 Pull Request

## 📄 许可证

[根据项目中LICENSE文件自动识别，如无则提示用户确认]

## 👥 团队

- **项目负责人**：[待用户填写]
- **技术负责人**：[待用户填写]
- **贡献者**：[待用户填写]

## 📞 支持与联系

- 🐛 **Bug报告**：[待用户填写Issue地址]
- 💬 **功能建议**：[待用户填写Feature Request地址]
- 📧 **邮件支持**：[待用户填写邮箱]
- 💬 **社区讨论**：[待用户填写社区地址]
```

# 自动化内容生成规则
## 项目简介生成规则
1. pom.xml中的项目名称和描述
2. 基于主要业务目录推断核心功能
3. 结合技术栈特点生成价值主张
4. 格式："[项目类型]，专注于[核心功能]，为[目标用户]提供[核心价值]"

## 技术架构生成规则
1. 严格基于实际识别的技术栈，不得臆测
2. 包含版本信息（如果可以识别）
3. 按前端、后端、数据库、部署的顺序组织
4. 只填写确认识别的技术，不确定的标记为"待确认"

## 环境要求生成规则
1. 基于识别的技术栈生成最小环境要求
2. Java项目：JDK版本 + Maven/Gradle
3. Node.js项目：Node.js版本 + npm/yarn
4. Python项目：Python版本 + pip
5. 包含必要的系统依赖和端口要求

## 安装步骤生成规则
1. 基于项目类型提供标准化安装流程
2. 包含依赖安装、配置文件设置、数据库初始化等步骤
3. 每个步骤提供具体可执行的命令
4. 包含安装成功的验证方法

## 项目结构生成规则
1. 扫描项目根目录，生成完整目录树
2. 对主要目录添加功能说明注释
3. 过滤掉node_modules、.git等无关目录
4. 突出显示核心业务目录和配置文件

# 质量控制标准
## 信息准确性要求
- 技术栈识别：100%基于实际文件和配置
- 版本信息：使用系统当前日期，版本号需用户确认
- 目录结构：基于实际扫描结果，不得虚构
- 链接地址：仅生成确实存在的文件链接

## 可操作性要求
- 新用户阅读5分钟内理解项目价值和架构
- 技术人员按照安装步骤15分钟内完成环境搭建
- 所有命令和步骤必须可执行
- 所有文档链接必须有效

## 完整性要求
- 必须包含所有必备章节
- 技术栈识别覆盖前端、后端、数据库、部署
- 用户场景覆盖开发者、运维、产品、最终用户
- 文档结构遵循标准模板格式

## 时效性要求
- 生成时间使用系统当前时间
- 版本信息标记生成日期
- 定期更新提醒机制
- 过期信息标记和更新

# 维护更新触发机制
## 强制更新条件
- 版本发布：必须更新版本信息和变更内容
- 架构变更：必须更新技术架构和环境要求
- 环境变化：必须更新安装步骤和环境要求
- 重大功能变更：必须更新项目简介和功能说明

## 建议更新条件
- 问题解决：及时更新已知问题状态
- 文档新增：更新详细文档链接
- 团队变化：更新团队成员信息
- 联系方式变化：更新支持联系信息

# 禁止行为和约束条件
## 严禁杜撰信息
- 不得虚构技术栈版本信息
- 不得编造不存在的功能特性
- 不得假设不确定的配置参数
- 不得生成无效的文档链接

## 强制使用实际数据
- 时间信息必须使用系统当前时间
- 目录结构必须基于实际扫描
- 技术栈必须基于配置文件识别
- 版本号等用户信息需明确标注待填写

## 质量底线要求
- 所有生成内容必须可验证
- 所有操作步骤必须可执行
- 所有链接地址必须可访问
- 所有技术信息必须准确无误

# 错误处理和异常情况
## 技术栈识别失败
- 明确标注"技术栈待确认"
- 提供手动识别指导
- 记录识别失败原因
- 建议人工补充确认

## 现有文档不完整
- 明确标注缺失文档类型
- 提供文档补充建议
- 设置补充优先级
- 建立文档完善计划

## 环境复杂多样
- 提供多种环境选择
- 标注环境适用场景
- 提供环境切换指导
- 建立环境问题FAQ

</readme_generation_standard>