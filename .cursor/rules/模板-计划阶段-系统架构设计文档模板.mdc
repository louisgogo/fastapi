---
description: 
globs: 
alwaysApply: true
---
<ipd_plan_phase_system_architecture_design_template description="IPD流程计划阶段系统架构设计文档标准模版">
- 文档名称：系统架构设计文档
- 适用阶段：IPD流程-计划阶段
- 适用范围：软件开发项目
- 输出要求：文档需以markdown格式编写，结构完整，内容详实，命名为"系统架构设计文档.md"
- 输出目录：输出到系统根目录下doc文件夹中

# 模版结构
1. 文档信息
    - 文档名称
    - 编写人
    - 编写日期
    - 修订记录
2. 概述
    - 编写目的：说明架构设计文档的目标和作用
    - 项目背景：简述项目背景和业务需求
    - 架构范围：界定架构设计的边界和覆盖范围
    - 术语定义：列出架构相关的专业术语及定义
    - 参考文献：列出相关的参考文档和标准
3. 架构需求
    - 功能性需求：从架构角度描述的功能需求
    - 非功能性需求：性能、可靠性、安全性、可扩展性等要求
    - 质量属性：可维护性、可测试性、可部署性等要求
    - 约束条件：技术约束、业务约束、环境约束等
4. 架构设计原则
    - 设计原则：列出架构设计遵循的基本原则
    - 架构风格：说明采用的架构风格和模式
    - 技术选型原则：技术选择的指导原则
    - 设计权衡：重要的架构决策和权衡考虑
5. 总体架构
    - 5.1 系统架构概览
        - 系统架构图：整体系统架构视图
        - 架构分层：系统的逻辑分层结构
        - 组件关系：主要组件间的关系和交互
    - 5.2 部署架构
        - 部署架构图：系统的物理部署视图
        - 环境规划：开发、测试、生产环境规划
        - 基础设施：服务器、网络、存储等基础设施
6. 应用架构
    - 6.1 应用分层架构
        - 表现层：用户界面和交互设计
        - 业务层：业务逻辑和服务设计
        - 数据访问层：数据访问和持久化设计
        - 基础设施层：通用服务和工具组件
    - 6.2 服务架构
        - 服务划分：微服务或模块化服务划分
        - 服务接口：服务间的接口定义和协议
        - 服务治理：服务注册、发现、监控等机制
7. 数据架构
    - 7.1 数据模型
        - 概念数据模型：业务实体和关系
        - 逻辑数据模型：数据表结构和关系
        - 物理数据模型：数据库实现和优化
    - 7.2 数据管理
        - 数据存储：数据库选型和分库分表策略
        - 数据同步：数据一致性和同步机制
        - 数据安全：数据加密、备份、恢复策略
8. 技术架构
    - 8.1 技术选型
        - 开发框架：前端和后端技术框架
        - 中间件：消息队列、缓存、搜索引擎等
        - 数据库：关系型和非关系型数据库选择
        - 第三方服务：外部API和服务集成
    - 8.2 技术栈
        - 前端技术栈：UI框架、构建工具、测试工具等
        - 后端技术栈：编程语言、框架、运行环境等
        - 数据技术栈：数据库、缓存、消息队列等
        - 运维技术栈：容器化、监控、日志等
9. 安全架构
    - 安全策略：整体安全策略和原则
    - 身份认证：用户认证和授权机制
    - 数据安全：数据传输和存储安全
    - 网络安全：网络访问控制和防护
    - 安全监控：安全事件监控和响应
10. 性能架构
    - 性能目标：系统性能指标和要求
    - 性能优化：缓存、负载均衡、数据库优化等
    - 容量规划：系统容量评估和扩展策略
    - 监控体系：性能监控和告警机制
11. 可靠性架构
    - 高可用设计：系统高可用性保障措施
    - 容灾备份：数据备份和灾难恢复方案
    - 故障处理：故障检测、隔离、恢复机制
    - 服务降级：服务降级和熔断机制
12. 架构实现
    - 12.1 开发规范
        - 编码规范：代码风格和质量标准
        - 接口规范：API设计和文档规范
        - 测试规范：单元测试、集成测试规范
    - 12.2 部署规范
        - 构建流程：代码构建和打包流程
        - 部署流程：应用部署和发布流程
        - 配置管理：环境配置和参数管理
13. 架构演进
    - 演进策略：架构演进和升级策略
    - 技术债务：识别和管理技术债务
    - 重构计划：系统重构和优化计划
    - 版本管理：架构版本控制和变更管理
14. 风险评估
    - 技术风险：技术选型和实现风险
    - 架构风险：架构复杂性和维护风险
    - 性能风险：性能瓶颈和扩展风险
    - 安全风险：安全漏洞和威胁风险
    - 风险应对：风险缓解和应对措施
15. 附录
    - 架构决策记录：重要架构决策的记录
    - 技术调研报告：技术选型的调研结果
    - 原型验证：架构原型的验证结果
    - 相关文档链接：相关设计文档的链接

# 约束
- 文档必须覆盖上述所有一级标题内容
- 架构图必须使用标准的UML或架构图符号
- 系统架构图使用mermaid语言绘制
- UML图使用PlantUML语言绘制
- 技术选型必须提供详细的选择理由和对比分析
- 非功能性需求必须量化，提供具体指标
- 架构决策必须记录决策背景、选项和理由
- 风险评估需要量化分析，提供风险等级和应对措施

# 架构设计规范
- 架构图层次：系统级->子系统级->组件级->类级
- 组件命名：使用统一的命名规范
- 接口定义：明确输入输出和异常处理
- 依赖关系：明确组件间的依赖方向和强度
- 架构约束：明确架构约束和设计边界

# 质量标准
- 架构完整性：覆盖所有架构视图和关注点
- 架构一致性：架构设计内部无冲突
- 架构可行性：技术和资源角度可实现
- 架构可维护性：易于理解、修改和扩展
- 架构可追踪性：需求到架构的映射关系清晰

# 评审要点
- 架构是否满足功能和非功能需求
- 技术选型是否合理和可行
- 架构复杂度是否适中
- 架构扩展性和演进性如何
- 架构风险是否可控

</ipd_plan_phase_system_architecture_design_template>